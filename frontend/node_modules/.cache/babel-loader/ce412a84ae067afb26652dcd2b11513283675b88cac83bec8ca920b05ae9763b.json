{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\n/**\n * Generate the props to pass to the container element of each section of the field.\n * It is not used by the non-accessible DOM structure (with an <input /> element for editing).\n * It should be used in the MUI accessible DOM structure and the Base UI implementation.\n * @param {UseFieldRootPropsParameters} parameters The parameters of the hook.\n * @returns {UseFieldRootPropsReturnValue} The props to forward to the container element of each section of the field.\n */\nexport function useFieldSectionContainerProps(parameters) {\n  const {\n    stateResponse: {\n      // Methods to update the states\n      setSelectedSections\n    },\n    internalPropsWithDefaults: {\n      disabled = false\n    }\n  } = parameters;\n  const createHandleClick = useEventCallback(sectionIndex => event => {\n    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.\n    // We avoid this by checking if the call to this function is actually intended, or a side effect.\n    if (disabled || event.isDefaultPrevented()) {\n      return;\n    }\n    setSelectedSections(sectionIndex);\n  });\n  return React.useCallback(sectionIndex => ({\n    'data-sectionindex': sectionIndex,\n    onClick: createHandleClick(sectionIndex)\n  }), [createHandleClick]);\n}","map":{"version":3,"names":["React","useEventCallback","useFieldSectionContainerProps","parameters","stateResponse","setSelectedSections","internalPropsWithDefaults","disabled","createHandleClick","sectionIndex","event","isDefaultPrevented","useCallback","onClick"],"sources":["/Users/ssridhar2/work/cron-scheduler-app/node_modules/@mui/x-date-pickers/esm/internals/hooks/useField/useFieldSectionContainerProps.js"],"sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\n/**\n * Generate the props to pass to the container element of each section of the field.\n * It is not used by the non-accessible DOM structure (with an <input /> element for editing).\n * It should be used in the MUI accessible DOM structure and the Base UI implementation.\n * @param {UseFieldRootPropsParameters} parameters The parameters of the hook.\n * @returns {UseFieldRootPropsReturnValue} The props to forward to the container element of each section of the field.\n */\nexport function useFieldSectionContainerProps(parameters) {\n  const {\n    stateResponse: {\n      // Methods to update the states\n      setSelectedSections\n    },\n    internalPropsWithDefaults: {\n      disabled = false\n    }\n  } = parameters;\n  const createHandleClick = useEventCallback(sectionIndex => event => {\n    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.\n    // We avoid this by checking if the call to this function is actually intended, or a side effect.\n    if (disabled || event.isDefaultPrevented()) {\n      return;\n    }\n    setSelectedSections(sectionIndex);\n  });\n  return React.useCallback(sectionIndex => ({\n    'data-sectionindex': sectionIndex,\n    onClick: createHandleClick(sectionIndex)\n  }), [createHandleClick]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6BAA6BA,CAACC,UAAU,EAAE;EACxD,MAAM;IACJC,aAAa,EAAE;MACb;MACAC;IACF,CAAC;IACDC,yBAAyB,EAAE;MACzBC,QAAQ,GAAG;IACb;EACF,CAAC,GAAGJ,UAAU;EACd,MAAMK,iBAAiB,GAAGP,gBAAgB,CAACQ,YAAY,IAAIC,KAAK,IAAI;IAClE;IACA;IACA,IAAIH,QAAQ,IAAIG,KAAK,CAACC,kBAAkB,CAAC,CAAC,EAAE;MAC1C;IACF;IACAN,mBAAmB,CAACI,YAAY,CAAC;EACnC,CAAC,CAAC;EACF,OAAOT,KAAK,CAACY,WAAW,CAACH,YAAY,KAAK;IACxC,mBAAmB,EAAEA,YAAY;IACjCI,OAAO,EAAEL,iBAAiB,CAACC,YAAY;EACzC,CAAC,CAAC,EAAE,CAACD,iBAAiB,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}